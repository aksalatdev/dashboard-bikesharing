# -*- coding: utf-8 -*-
"""axlnewDicodingipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEy2xdBsyuxEZKtdu-3dQiDDHfhDPiCk

# Proyek Analisis Data: Bike Sharing Dataset
- **Nama:** Aksal Abitahta Turipan
- **Email:** gothsaiko2@gmail.com
- **ID Dicoding:** A006YBF044

## Menentukan Pertanyaan Bisnis

- Apakah peningkatan penggunaan sepeda di tahun 2012 murni karena faktor musiman (cuaca) atau juga didorong oleh kebijakan/infrastruktur?
- Bagaimana dampak cuaca ekstrem (misalnya, hujan lebat/suhu sangat rendah) terhadap perilaku pengguna casual vs. registered?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import numpy as np
from tabulate import tabulate

"""## Data Inspection

### Tahap Data Inspection (Pemeriksaan Awal Dataset)

Langkah pertama dalam proses analisis data adalah memahami isi dan struktur dataset. Berikut beberapa pengecekan dasar yang dilakukan:

#### 1. Load Dataset
Dataset dimuat dari file `day.csv` yang sudah diekstrak sebelumnya dari file ZIP.


`df = pd.read_csv("/content/data/day.csv")`



*   Cek Struktur & Info Data
*   Statistik Deskriptif
*   Cek Struktur & Info Data
*   Cek Missing Value
*   Cek Data Duplikat
*   Tampilkan Data awal

### Kesimpulan Sementara:
- **Tidak ditemukan missing value maupun data duplikat.**
- Dataset sudah cukup bersih untuk dilanjutkan ke tahap berikutnya: **Data Wrangling.**



"""

# day.csv
day_df = pd.read_csv("/content/data/day.csv")

# Cek Struktur & Info awal
print("Struktur Data: ")
print(day_df.info())

print("\n Statistik Awal:")
print(day_df.describe())

print("\n Missing Value:")
print(day_df.isnull().sum())

print("\n Duplikat:")
print(day_df.duplicated().sum())

# Preview 5 baris awal
day_df.head()

# hour.csv
hour_df = pd.read_csv("/content/data/hour.csv")

# Cek Struktur & Info awal
print("Struktur Data: ")
print(hour_df.info())

print("\n Statistik Awal:")
print(hour_df.describe())

print("\n Missing Value:")
print(hour_df.isnull().sum())

print("\n Duplikat:")
print(hour_df.duplicated().sum())

# Preview 5 baris awal
hour_df.head()

"""## Data Wrangling

###  Tahap Data Wrangling (Pembersihan dan Transformasi Data)

Setelah melakukan inspeksi awal, tahap selanjutnya adalah melakukan pembersihan dan transformasi data agar lebih siap untuk dianalisis.

#### 1. Mengubah Kolom `dteday` Menjadi Format DateTime
Kolom `dteday` diubah ke format datetime agar bisa dimanfaatkan untuk analisis berbasis waktu.

```
df['dteday'] = pd.to_datetime(df['dteday'])
  ```

actually we just do quick inspect earlier, but we do it detail right here

### Gathering Data

Pada tahap ini, memuat dataset Bike Sharing yang terbagi menjadi dua file, yaitu:
- **day.csv**: Berisi informasi penggunaan sepeda per hari.
- **hour.csv**: Berisi informasi penggunaan sepeda per jam.
"""

# Read daily data
day_df = pd.read_csv("/content/data/day.csv")

# Read hourly data
hour_df = pd.read_csv("/content/data/hour.csv")

print("Daily Data sample:")
print(day_df.head())

print("\n Hourly Data sample:")
print(hour_df.head)

"""**Insight:**
- Jumlah baris,kolom dan tipe data(apakah numerik,kategori atau tanggal)
- Nama kolom

### Assessing Data

### Memeriksa Struktur Dataset

Code ini memberikan informasi dasar (`info()`) dari dataset **daily** dan **hourly**. Fungsi `info()` menampilkan jumlah kolom, tipe data, dan jumlah **non-null** values di setiap kolom.
"""

# Daily Data
print("\n---- day_df info ----")
print(day_df.info())

# Hourly Data
print("\n---- houe_df info ----")
print(hour_df.info())

print("\n--- day_df describe ---")
print(day_df.describe())

print("\n--- df_hour describe ---")
print(hour_df.describe())

print("\n Missing Value in day_df:")
print(day_df.isnull().sum())

print("\n Missing Value in hour_df:")
print(hour_df.isnull().sum())

print("\n Duplikat in day_df:")
print(day_df.duplicated().sum())

print("\n Duplikat in hour_df:")
print(hour_df.duplicated().sum())

print("\n Unique Value in 'season' (daily) day_df:")
print(day_df['season'].nunique())

print("\n Unique Value in 'weathersit' (hourly) hour_df:")
print(hour_df['weathersit'].nunique())

"""**Insight:**
- xxx
- xxx

### Cleaning Data

Proses ini bertujuan untuk **meningkatkan kualitas dan konsistensi data** sebelum ke EDA. Langkah-langkah nya adalah menghapus duplikasi, mengganti nama kolom, mengubah tipe data menjadi format yang sesuai, dan membuat fitur baru.
"""

# Convert dateday to datetime
day_df['dteday'] = pd.to_datetime(day_df['dteday'], errors='coerce')
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'], errors='coerce')

# Rename Columns
day_df.rename(columns={
    'yr': 'year',
    'mnth': 'month',
    'hum': 'humidity',
    'cnt': 'total_rentals'
}, inplace=True)

hour_df.rename(columns={
    'yr': 'year',
    'mnth': 'month',
    'hr': 'hour',
    'hum': 'humidity',
    'cnt': 'total_rentals'
}, inplace=True)

# Convert 'dteday' to datetime (day_df & hour_df)
day_df['dteday'] = pd.to_datetime(day_df['dteday'], errors='coerce')
hour_df['dteday'] = pd.to_datetime(hour_df['dteday'], errors='coerce')

# Create Feature for analyzing trends by weekday or month
day_df['day_of_week'] = day_df['dteday'].dt.day_name()
hour_df['day_of_week'] = hour_df['dteday'].dt.day_name()

day_df['month_name'] = day_df['dteday'].dt.month_name()
hour_df['month_name'] = hour_df['dteday'].dt.month_name()

# Convert year from 0/1 to 2011/2012
day_df['year_actual'] = day_df['year'].apply(lambda x: 2011 if x == 0 else 2012)
hour_df['year_actual'] = hour_df['year'].apply(lambda x: 2011 if x == 0 else 2012)

# Convert normalized temperature to  real Celsius
day_df['temp_c'] = day_df['temp'] * 41
hour_df['temp_c'] = hour_df['temp'] * 41

# Checking final info
print("--- Cleaned day_df ---")
day_df.info()
print(day_df.head())

print("\n--- Cleaned hour_df ---")
hour_df.info()
print(hour_df.head())

"""**Insight:**
- Tidak Ada Missing Value
- Tidak Ada Duplicate
- Colum Renaming
- Proper Date/Time Conversion
- Create some feature engineering

**Data Ready for EDA**

## Exploratory Data Analysis (EDA)

### Explore day_df
"""

# stats for daily data
day_df.describe()

"""### Daily


Dari table diatas ditemukan beberapa interesting Points
- total_rentals
- temp_c

### total_rentals
- mean:4504
- median:4548
- max: 8714
- min: 22

***mean < median***

> distribusi total_rentals cenderung sedikit left-skewed yang mana sebagian besar hari punya jumlah rental tinggi, tapi ada beberapa hari dengan rental yang kecil banget(could be hari hujan,libur atau karena cuaca)


  

### temp_c
- mean:20.31
- median: 20.43
- max: 35.33
- min: 2.42


> mean dan median hampir sama, distribusinya bisa jadi simetris, tapi dari range min dan max ada `hari yang dingin banget` dan ada juga `hari yang panas banget`.



"""

# stats for hourly data
hour_df.describe()

"""### Hourly

### total_rentals
- mean:189
- median:142
- max: 977
- min: 1

***mean > median***

> Jumlah peminjaman sepeda per jam punya pola peak hour vs jam sepi, yang bisa dieksplor lebih lanjut pake grafik.


  

### temp_c
- mean:20.37
- median: 20.5
- max: 41.0
- min: 0.82


> Sebagian besar jam punya suhu yang "nyaman", tapi tetap ada beberapa jam sangat dingin atau sangat panas..

### Histogram Daily
"""

# Distribution of daily total rentals

# Histogram of daily total rentals
plt.figure()
plt.hist(day_df['total_rentals'], bins=20, edgecolor='black')
plt.title('Distribution of Daily Total Rentals')
plt.xlabel('Number of Rentals')
plt.ylabel('Frequency')
plt.tight_layout()

plt.show()

"""left skewed

### Histogram Hourly
"""

# Distribution of hourly total rentals

# Histogram of hourly total rentals
plt.figure()
plt.hist(hour_df['total_rentals'], bins=50, edgecolor='black')
plt.title('Distribution of Hourly Total Rentals')
plt.xlabel('Number of Rentals')
plt.ylabel('Frequency')
plt.tight_layout()

plt.show()

"""Right skewed"""

## Time-Seriex Exploration
# Trend Over Time(daily)
plt.figure(figsize=(14, 8))  # Ukuran gambar lebih besar untuk keterbacaan lebih baik

# Plot data dengan warna dan ketebalan garis yang lebih jelas
plt.plot(day_df['dteday'], day_df['total_rentals'], color='#0072B2', linewidth=1.5)

# Menambahkan judul dan label dengan ukuran font yang lebih besar
plt.title('Daily Rentals Over Time', fontsize=16, fontweight='bold')
plt.xlabel('Date', fontsize=12)
plt.ylabel('Total Rentals', fontsize=12)

# Menambahkan grid untuk memudahkan pembacaan nilai
plt.grid(True, linestyle='--', alpha=0.7)

# Format sumbu x untuk menampilkan tanggal dengan lebih baik
plt.gca().xaxis.set_major_locator(mdates.MonthLocator(interval=2))  # Tanda setiap 2 bulan
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%b %Y'))  # Format 'Bulan Tahun'
plt.gcf().autofmt_xdate(rotation=45)  # Memutar label tanggal dengan sudut 45 derajat

# Mengatur padding dan layout agar tidak terpotong
plt.tight_layout()

# Menambahkan highlight untuk nilai maksimum dan minimum (opsional)
max_idx = day_df['total_rentals'].idxmax()
min_idx = day_df['total_rentals'].idxmin()
plt.scatter(day_df['dteday'][max_idx], day_df['total_rentals'][max_idx], color='green', s=100, label='Max')
plt.scatter(day_df['dteday'][min_idx], day_df['total_rentals'][min_idx], color='red', s=100, label='Min')
plt.legend()

plt.show()

# Group by month_name or month to see average rentals
rentals_by_month = day_df.groupby('month_name')['total_rentals'].mean().sort_values()

plt.figure()
rentals_by_month.plot(kind='bar')
plt.title('Average Daily Rentals by Month (2011-2012)')
plt.xlabel('Month')
plt.ylabel('Average Rentals')
plt.show()

rentals_by_weekday = day_df.groupby('day_of_week')['total_rentals'].mean().sort_values()

plt.figure()
rentals_by_weekday.plot(kind='bar')
plt.title('Average Daily Rentals by Day of Week')
plt.xlabel('Day of Week')
plt.ylabel('Average Rentals')
plt.show()

"""Terlihat weekend higher than weekdays"""

# For daily data, pick numeric columns
numeric_cols = ['temp_c', 'humidity', 'windspeed', 'total_rentals']

corr_matrix = day_df[numeric_cols].corr()
print(corr_matrix)

"""Suhu (temp_c) adalah indikator paling kuat: cuaca yang hangat → peminjaman sepeda meningkat.

Humidity & windspeed punya efek negatif, tapi jauh lebih kecil.

Korelasi ≠ sebab-akibat → perlu analisis/modeling lanjutan untuk make sure pengaruh sebenarnya.


"""

plt.figure(figsize=(10, 6))  # Atur ukuran gambar agar lebih proporsional
plt.scatter(day_df['temp_c'], day_df['total_rentals'], alpha=0.6)  # Tambahkan alpha untuk transparansi
plt.title('Daily Rentals vs. Temperature', fontsize=16)  # Perbesar ukuran font judul
plt.xlabel('Temperature (Celsius)', fontsize=12)  # Perjelas label sumbu x
plt.ylabel('Total Rentals', fontsize=12)  # Perjelas label sumbu y
plt.grid(True, linestyle='--', alpha=0.7)  # Tambahkan grid untuk memudahkan pembacaan
plt.tight_layout()  # Atur layout agar tidak terpotong
plt.show()

"""### Hourly

"""

# Create a new column 'weekday' (1 for weekdays, 0 for weekends)
hour_df['weekday'] = hour_df['day_of_week'].apply(lambda day: 1 if day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] else 0)

# Group by hour and weekday to get average rentals
hourly_trends_weekday = hour_df[hour_df['weekday'] == 1].groupby('hour')['total_rentals'].mean()
hourly_trends_weekend = hour_df[hour_df['weekday'] == 0].groupby('hour')['total_rentals'].mean()

# Create the plot
plt.figure(figsize=(12, 6))  # Adjust figure size for better readability

# Plot weekday and weekend trends with different colors
hourly_trends_weekday.plot(kind='bar', color='skyblue', label='Weekday')
hourly_trends_weekend.plot(kind='bar', color='coral', label='Weekend', alpha=0.7)  # Use alpha for transparency

# Add title and labels
plt.title('Average Hourly Rentals by Weekday/Weekend', fontsize=16)
plt.xlabel('Hour of Day', fontsize=12)
plt.ylabel('Average Number of Rentals', fontsize=12)

# Add legend
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

"""**Insight:**
- Distribusi cenderung right-skewed: Kebanyakan hari punya rentals menengah (3–5 ribu), tapi ada beberapa hari yang meledak di atas 8 ribu.
- Mengindikasikan sebagian kecil hari “peak” rental yang tinggi (mungkin event/cuaca spesial).

## Visualization & Explanatory Analysis

### Pertanyaan 1: Apakah peningkatan penggunaan sepeda di tahun 2012 murni karena faktor musiman (cuaca) atau juga didorong oleh kebijakan/infrastruktur?
"""

day_df['year_actual'] = day_df['year'].apply(lambda x: 2011 if x == 0 else 2012)

monthly_comparison = day_df.groupby(['year_actual', 'month'])['total_rentals'].mean().reset_index()


plt.figure(figsize=(10,6))
for year in monthly_comparison['year_actual'].unique():
    subset = monthly_comparison[monthly_comparison['year_actual'] == year]
    plt.plot(subset['month'], subset['total_rentals'], marker='o', label=str(year))
plt.title('Average Monthly Rentals by Year')
plt.xlabel('Month')
plt.ylabel('Average Daily Rentals')
plt.legend(title='Year')
plt.xticks(range(1, 13))
plt.tight_layout()
plt.show()

"""- Garis warna orange (2012) konsisten lebih tinggi dibanding garis biru (2011) di setiap bulan.

- Keduanya punya pola musiman yang mirip (naik menuju puncak di musim panas, turun saat mendekati musim dingin).

- Selisih 2012 vs. 2011 cukup konstan di seluruh bulan

### Pertanyaan 2:Bagaimana dampak cuaca ekstrem (misalnya, hujan lebat/suhu sangat rendah) terhadap perilaku pengguna casual vs. registered?
"""

# Group by weather situation: hitung rata-rata casual dan registered rentals
weather_groups = day_df.groupby('weathersit').agg({'casual': 'mean', 'registered': 'mean'}).reset_index()

# Buat grouped bar chart
x = weather_groups['weathersit']
width = 0.35

fig, ax = plt.subplots(figsize=(8,5))
ax.bar(x - width/2, weather_groups['casual'], width, label='Casual')
ax.bar(x + width/2, weather_groups['registered'], width, label='Registered')

ax.set_xlabel('Weather Situation')
ax.set_ylabel('Average Rentals')
ax.set_title('Average Rentals by Weather Situation')
ax.set_xticks(x)
ax.set_xticklabels(x)
ax.legend()
plt.tight_layout()
plt.show()

"""- Registered (bar orange) selalu lebih tinggi daripada casual (bar biru) di setiap kondisi cuaca.

- Cuaca cerah (1): paling banyak rentals untuk keduanya.

- Cuaca lebih buruk (2, 3): rentals turun, terutama untuk casual.

**Insight:**
- Faktor Musiman vs. Kebijakan: Data bulanan menunjukkan peningkatan 2012 bukan semata karena cuaca. Ada faktor lain mungkin(promosi, stasiun baru, dsb.).

- Perbedaan Casual vs. Registered di Cuaca Ekstrem: Casual lebih anjlok di kondisi cuaca buruk, sedangkan registered masih tetap lebih tinggi (meski turun juga).

## Analisis Lanjutan (Opsional)
"""



"""## Conclusion

### Kesimpulan
- Ada Pertumbuhan Penggunaan

Tahun 2012 consistently lebih tinggi dibanding 2011 di setiap bulan ⇒ indikasi ekspansi, kebijakan, atau promosi baru, bukan sekadar faktor cuaca.

- Efek Cuaca

> Cuaca cerah (weathersit=1) mendorong rentals tertinggi, sedangkan cuaca buruk menurunkan rentals, terutama di segmen casual.

- Implikasi

> - Untuk menjaga penggunaan di cuaca buruk, operator bisa fokus ke strategi penanganan (misalnya: diskon saat hujan, infrastruktur peneduh, dll.).
- Kenaikan total rentals di 2012 menandakan potensi pasar terus berkembang; perlu dukungan infrastruktur (penambahan stasiun, jalur sepeda aman) untuk mempertahankan tren positif.
"""